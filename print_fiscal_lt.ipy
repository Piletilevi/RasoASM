# coding: utf-8
from sys import path
path.append("C:\Users\PiletiLevi\Documents\GitHub\RasoASM\Lib\json")
path.append("C:\Users\PiletiLevi\Documents\GitHub\RasoASM\Lib")
path.append("C:\Users\PiletiLevi\Documents\GitHub\RasoASM")

import clr

clr.AddReference('IronPython')
clr.AddReference('IronPython.Modules')
clr.AddReference('Microsoft.Scripting.Metadata')
clr.AddReference('Microsoft.Scripting')
clr.AddReference('Microsoft.Dynamic')
clr.AddReference('mscorlib')
clr.AddReference('System')
clr.AddReference('System.Data')

from json import load as loadJSON
from System import Type, Activator
from os import environ
from time import sleep

plp_filename = environ['plp_filename']

with open(plp_filename, 'rU') as plp_data_file:
    plp_json_data = loadJSON(plp_data_file)

def validate_fiscal(plp_json_data):
    if (not 'info' in plp_json_data):
        raise IndexError('Missing "info" field in plp file.')
    if (plp_json_data['info'] != 'fiscal'):
        raise ValueError('Only "info" == "fiscal" is supported currently')
    if (not 'operation' in plp_json_data):
        raise IndexError('Missing "operation" field in plp file.')
    if (plp_json_data['operation'] not in ('sale', 'refund', 'startshift', 'endshift')):
        raise ValueError('"operation" must be one of "sale", "refund", "startshift", "endshift"')

validate_fiscal(plp_json_data)

operation = plp_json_data['operation']
print('{0} {1} operation from:\n{2}'.format(plp_json_data['info'], operation, plp_filename))

oo = Type.GetTypeFromProgID('POS.SA97')
bills = Activator.CreateInstance(oo)
while bills.Init() != 0:
    sleep(0.1)

if bills.Param(1015) == 1:
    bills.FCancel()
elif bills.Param(1015) == 2:
    bills.NFFinish2(1)

if operation in ('sale', 'refund'):
    if operation == 'sale':
        bills.FStart(0)
    else:
        bills.FStart(1)
    bills.Print('{0} - {1}'.format(plp_json_data['salesPoint'], plp_json_data['operation']))
    bills.Print('')
    payment_method_total = {'1':0, '2':0, '3':0, '4':0}
    payment_method_name = {'1':'GRYNIEJI', '2':'KREDITINĖ KORTELĖ', '3':'DOVANŲ KORTELĖ', '4':'-'}
    for payment in plp_json_data['payments']:
        payment_method_total[payment['type']] = payment_method_total[payment['type']] + payment['cost']
        bills.Print('{0} = {1}'.format(payment_method_name[payment['type']], '%.2f' % payment['cost']))
        for component in payment['components']:
            if not 'kkm' in component:
                continue
            if not 'amount' in component:
                component['amount'] = 1
            if not component['kkm']:
                continue
            if component['amount'] != 1: # we dont want to print amounts yet
                component['amount'] = 1
            if component['type'] == 'service fee':
                vat_sign = 0
            else:
                vat_sign = 3
            bills.FOperation(component['name'], component['amount'], component['cost'], vat_sign)

    bills.FFinish3(
        payment_method_name['3'], payment_method_total['3'], 1,
        payment_method_name['2'], payment_method_total['2'], 1,
        payment_method_name['1'], payment_method_total['1'], 0)
elif operation == 'startshift':
    print('startshift')
    bills.ReportX()
    bills.NFFinish2(1)
elif operation == 'endshift':
    print('endshift')
    bills.ReportX()
    bills.ReportZ()
    bills.NFFinish2(1)

bills.Close()
