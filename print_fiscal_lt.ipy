# coding: utf-8

from sys import path as syspath
syspath.append("C:\Users\PiletiLevi\Documents\GitHub\RasoASM\Lib\json")
syspath.append("C:\Users\PiletiLevi\Documents\GitHub\RasoASM\Lib")
syspath.append("C:\Users\PiletiLevi\Documents\GitHub\RasoASM")

import clr

clr.AddReference('IronPython')
clr.AddReference('IronPython.Modules')
clr.AddReference('Microsoft.Scripting.Metadata')
clr.AddReference('Microsoft.Scripting')
clr.AddReference('Microsoft.Dynamic')
clr.AddReference('mscorlib')
clr.AddReference('System')
clr.AddReference('System.Data')
#References to created DLL of python modules
# clr.AddReference('StdLib')

from json import load as loadJSON
from os import environ, path
from sys import argv, exit
from System import Type, Activator
from time import time, sleep


BASEDIR = path.realpath(path.dirname(argv[0]))
PACKAGE_FILE_NAME = path.join(BASEDIR, 'package.json')
with open(PACKAGE_FILE_NAME, 'r') as package_json_file:
    PACKAGE_JSON = loadJSON(package_json_file)

print '{0} {1}'.format(PACKAGE_JSON['name'], PACKAGE_JSON['version'])

if 'plp_filename' in environ:
    plp_filename = environ['plp_filename']
else:
    print 'PLP filename not in environment.'
    if len(argv) > 1:
        plp_filename = argv[1]
    else:
        print 'PLP filename not in arguments, neither. Bye.'
        exit(0)

with open(plp_filename, 'rU') as plp_data_file:
    plp_json_data = loadJSON(plp_data_file)

    # Backward compatible with older plp file specs
    if ('info' in plp_json_data):
        plp_json_data['jobType'] = plp_json_data['info']
        plp_json_data['printer'] = {
            'type': 'fiscal',
            'systemName': 'RasoASM'
        }


def validate_fiscal(plp_json_data):
    # TODO:
    # Negotiate with project team to create data structure that makes sense
    #
    # if (not 'printer' in plp_json_data):
    #     raise IndexError('Missing "printer" field in plp file.')
    # if (not 'type' in plp_json_data['printer']):
    #     raise IndexError('Missing "printer.type" field in plp file.')
    # if (plp_json_data['printer']['type'] != 'fiscal'):
    #     raise ValueError('This driver prints only to fiscal printer RasoASM.')
    #
    if (not 'info' in plp_json_data):
        raise IndexError('Missing "info" field in plp file.')
    if (not 'salesPoint' in plp_json_data):
        raise IndexError('Missing "salesPoint" field in plp file.')
    if (not 'jobType' in plp_json_data):
        raise IndexError('Missing "jobType" field in plp file.')
    if plp_json_data['info'] == 'fiscal':
        if not 'operation' in plp_json_data:
            raise IndexError('Missing "operation" field in plp file.')
        if plp_json_data['operation'] not in ('sale', 'refund', 'startshift', 'endshift'):
            raise ValueError('"operation" must be one of "sale", "refund", "startshift", "endshift" in {0}.'.format(PLP_FILENAME))

validate_fiscal(plp_json_data)

operation = plp_json_data['operation']
print('{0} {1} operation from:\n{2}'.format(plp_json_data['info'], operation, plp_filename))

oo = Type.GetTypeFromProgID('POS.SA97')
bills = Activator.CreateInstance(oo)
timeout_sec = time() + 15
resolution_sec = 0.1
while bills.Init() != 0:
    sleep(resolution_sec)
    if timeout_sec < time():
        raise IOError('Failed to initialise session with fiscal printer.')

if bills.Param(1015) == 1:
    bills.FCancel()
elif bills.Param(1015) == 2:
    bills.NFFinish2(1)

if operation in ('sale', 'refund'):
    if operation == 'sale':
        bills.FStart(0)
    else:
        bills.FStart(1)
    bills.Print('{0} - {1}'.format(plp_json_data['salesPoint'], plp_json_data['operation']))
    bills.Print('')
    payment_method_total = {'1':0, '2':0, '3':0, '4':0}
    payment_method_total_validate = {'1':0, '2':0, '3':0, '4':0}
    payment_sum_failed = False
    payment_method_name = {'1':'GRYNIEJI', '2':'KORTELĖ', '3':'DOVANŲ KORTELĖ', '4':'-'}
    for payment in plp_json_data['payments']:
        payment_method_total[payment['type']] += payment['cost']
        bills.Print('{0} = {1}'.format(payment_method_name[payment['type']], '%.2f' % payment['cost']))
        for component in payment['components']:
            payment_method_total_validate[payment['type']] += component['cost']
            if not 'kkm' in component:
                continue
            if not 'amount' in component:
                component['amount'] = 1
            if not component['kkm']:
                continue
            if component['amount'] != 1: # we dont want to print amounts yet
                component['amount'] = 1
            if component['type'] == 'service fee':
                vat_sign = 0
            else:
                vat_sign = 3
            bills.FOperation(component['name'], component['amount'], component['cost'], vat_sign)

    for ix in payment_method_total:
        if round(payment_method_total[ix], 2) != round(payment_method_total_validate[ix], 2):
            for i in range(0, 10):
                bills.Print('')
            bills.Print('-------------------------------------------')
            bills.Print('        !!! FISCAL DATA ERROR !!!')
            bills.Print('            In payment type {0}'.format(ix))
            bills.Print('Sum of component costs | {0}'.format(payment_method_total_validate[ix]))
            bills.Print('doesnot match          | !=')
            bills.Print('sum of payment costs   | {0}'.format(payment_method_total[ix]))
            bills.Print('-------------------------------------------')
            for i in range(0, 10):
                bills.Print('')
            payment_sum_failed = True

    if payment_sum_failed:
        bills.FCancel()
        bills.Close()
    else:
        bills.FFinish3(
            payment_method_name['3'], payment_method_total['3'], 2, # 3:'DOVANŲ KORTELĖ' -> 2: 2nd credit counter
            payment_method_name['2'], payment_method_total['2'], 1, # 2:'KORTELĖ'        -> 1: 1st credit counter
            payment_method_name['1'], payment_method_total['1'], 0) # 1:'GRYNIEJI'       -> 0: cache payment

elif operation == 'startshift':
    print('startshift')
    bills.ReportX()
    bills.NFFinish2(1)
elif operation == 'endshift':
    print('endshift')
    bills.ReportX()
    bills.ReportZ()
    bills.NFFinish2(1)

bills.Close()
